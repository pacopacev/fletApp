name: Auto Bump Version

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'version.py'

jobs:
  bump-version:
    # Prevent infinite loop
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'Bump version') }}
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Debug - List files
      run: ls -la
    
    - name: Check if version.py exists
      id: check_version
      run: |
        if [ -f "version.py" ]; then
          echo "version.py exists"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "version.py not found - creating it"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create version.py if missing
      if: steps.check_version.outputs.exists == 'false'
      run: |
        echo "# version.py
        version = {
            'version': '1.0.0',
            'major': 1,
            'minor': 0,
            'patch': 0,
            'build_date': '2024-01-01 00:00:00',
            'commit_hash': '${{ github.sha }}'
        }" > version.py
    
    - name: Show current version.py content
      run: cat version.py
    
    - name: Bump version
      id: bump
      run: |
        set -e  # Exit on error
        
        # Debug: Check Python version
        python --version
        
        # Extract current version with better error handling
        CURRENT_VERSION=$(python -c "
        import re
        try:
            with open('version.py', 'r') as f:
                content = f.read()
            print('File content length:', len(content))
            match = re.search(r\\\"'version': '([0-9]+\\.[0-9]+\\.[0-9]+)'\\\", content)
            if match:
                print('Found version:', match.group(1))
                print(match.group(1))
            else:
                print('No version found in file')
                # Try alternative pattern
                match2 = re.search(r\\\"version['\\\"]?\\s*:\\s*['\\\"]([0-9]+\\.[0-9]+\\.[0-9]+)['\\\"]\\\", content)
                if match2:
                    print('Found version (alt pattern):', match2.group(1))
                    print(match2.group(1))
                else:
                    print('Could not find version with any pattern')
                    exit(1)
        except Exception as e:
            print('Error reading version.py:', str(e))
            exit(1)
        ")
        
        if [ $? -ne 0 ]; then
          echo "Failed to extract current version"
          exit 1
        fi
        
        echo "Current version: $CURRENT_VERSION"
        
        # Parse and increment version
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        patch=$((patch + 1))
        NEW_VERSION="$major.$minor.$patch"
        
        echo "New version: $NEW_VERSION"
        
        # Update version.py file with better formatting
        python -c "
        from datetime import datetime
        import os

        new_content = f'''# version.py
        version = {{
            'version': '$NEW_VERSION',
            'major': $major,
            'minor': $minor, 
            'patch': $patch,
            'build_date': '$(date -u +"%Y-%m-%d %H:%M:%S")',
            'commit_hash': '${{ github.sha }}'
        }}
        '''

        print('Writing new content to version.py:')
        print(new_content)

        with open('version.py', 'w') as f:
            f.write(new_content)
        "
        
        # Verify the file was written
        echo "Updated version.py content:"
        cat version.py
        
        # Set outputs
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Show git status
      run: |
        git status
        git diff
    
    - name: Commit and push version bump
      run: |
        set -e  # Exit on error
        
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if git diff --quiet version.py; then
          echo "No changes to version.py - skipping commit"
          exit 0
        fi
        
        # Commit and push
        git add version.py
        git commit -m "ðŸš€ Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
        git push
        
        echo "âœ… Version bumped successfully!"